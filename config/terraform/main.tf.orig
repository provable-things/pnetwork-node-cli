terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "~>3.22.0"
    }
  }
}

provider "aws" {
  region = var.region
  access_key = var.access_key_id
  secret_key = var.secret_access_key
}

resource "aws_vpc" "tf-aws-vpc-1" {
  cidr_block = var.vpc_cidr_block
  instance_tenancy = var.instance_tenancy
  tags = {
    Name = var.vpc_name
  }
}

resource "aws_subnet" "tf-aws-subnet-1" {
  vpc_id = aws_vpc.tf-aws-vpc-1.id
  cidr_block = var.sub_cidr_block
  map_public_ip_on_launch = var.map_public_ip_on_launch
  availability_zone = var.availability_zone
  tags = {
    Name = var.sub_name
  }
}

resource "aws_internet_gateway" "tf-aws-igw-1" {
  vpc_id = aws_vpc.tf-aws-vpc-1.id
  tags = {
    Name = "pnode"
  }
}

resource "aws_route_table" "tf-aws-rtb-1" {
  vpc_id = aws_vpc.tf-aws-vpc-1.id
  route {
    cidr_block = var.rtb_cidr_block
    gateway_id = aws_internet_gateway.tf-aws-igw-1.id
  }
  tags = {
    Name = "pnode"
  }
}

resource "aws_route_table_association" "tf-aws-rta-1" {
  subnet_id = aws_subnet.tf-aws-subnet-1.id
  route_table_id = aws_route_table.tf-aws-rtb-1.id
}

resource "aws_security_group" "tf-aws-sg-1" {
  vpc_id = aws_vpc.tf-aws-vpc-1.id
  name = var.sg_name
  description = var.sg_desc
  ingress {
    cidr_blocks = [var.ing_cidr_block]
    from_port = var.ing_from_port1
    to_port = var.ing_to_port1
    protocol = var.ing_proto
  }
  ingress {
    cidr_blocks = [var.ing_cidr_block]
    from_port = var.ing_from_port2
    to_port = var.ing_to_port2
    protocol = var.ing_proto
  }
  ingress {
    cidr_blocks = [var.ing_cidr_block]
    from_port = var.ing_from_port3
    to_port = var.ing_to_port3
    protocol = var.ing_proto
  }
  ingress {
    cidr_blocks = [var.ing_cidr_block]
    from_port = var.ing_from_port4
    to_port = var.ing_to_port4
    protocol = var.ing_proto
  }
  ingress {
    cidr_blocks = [var.ing_cidr_block]
    from_port = var.ing_from_port5
    to_port = var.ing_to_port5
    protocol = var.ing_proto
  }
  egress {
    cidr_blocks = [var.egr_cidr_block]
    from_port = var.egr_from_port
    to_port = var.egr_to_port
    protocol = var.egr_proto
  }
}

resource "aws_key_pair" "generated_key" {
  key_name   = var.key_name
  public_key = file(var.key_pair_path["public_key_path"])
}

resource "aws_instance" "tf-aws-instance-1" {
  ami = var.inst_ami
  instance_type = var.inst_type
  enclave_options {
    enabled = true
  }
  iam_instance_profile = var.iam_role
  root_block_device {
    volume_size = var.root_vol_size
  }
  key_name = aws_key_pair.generated_key.key_name
  subnet_id = aws_subnet.tf-aws-subnet-1.id
  vpc_security_group_ids = [aws_security_group.tf-aws-sg-1.id]
  tags = {
    Name = var.inst_name
  }
}
